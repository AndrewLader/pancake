package repo

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"
)

// GetChangelog returns a markdown representation of the release notes for the provided repo
func GetChangelog(token string, organization string, repo string) (string, error) {
	releases, err := getReleases(token, organization, repo)
	if err != nil {
		return "", err
	}

	releaseNotes := make([]string, 0)

	heading := fmt.Sprintf("## Changelog for %s\n###### _Autogenerated by_ [pancake](https://github.com/andrewlader/pancake) on %s\n",
		repo, time.Now().Format("Mon 2.Jan.2006"))
	releaseNotes = append(releaseNotes, heading)

	for _, release := range releases {
		releaseNote := release.String()
		releaseNotes = append(releaseNotes, releaseNote)
	}

	return strings.Join(releaseNotes, "\n"), nil
}

func getReleases(token string, organization string, repo string) ([]*release, error) {
	const apiFormat = "https://api.github.com/repos/%s/%s/releases"
	const headerAuth = "Authorization"
	const headerAuthFormat = "token %s"

	api := fmt.Sprintf(apiFormat, organization, repo)
	header := fmt.Sprintf(headerAuthFormat, token)

	request, err := http.NewRequest(http.MethodGet, api, nil)
	if err != nil {
		return nil, err
	}

	request.Header.Set(headerAuth, header)

	client := http.Client{}
	response, err := client.Do(request)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	releaseNotes := make([]*release, 0)
	json.NewDecoder(response.Body).Decode(&releaseNotes)

	if len(releaseNotes) < 1 {
		return nil, fmt.Errorf("No release notes found...")
	}

	return releaseNotes, nil
}
